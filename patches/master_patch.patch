diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index 0056f10fdca015ff791757a41a775082d5473855..0fc4649a8c4d598a7a0e30d7754fefa17206a510 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -32,6 +32,13 @@ class StatisticsProviderImpl;
 namespace chrome_browser_net {
 class Predictor;
 }
+
+namespace atom {
+namespace api {
+  class Session;
+}
+}
+
 namespace content {
 class BrowserGpuChannelHostFactory;
 class BrowserGpuMemoryBufferManager;
@@ -412,6 +419,9 @@ class BASE_EXPORT ThreadRestrictions {
   friend class ui::CommandBufferLocal;
   friend class ui::GpuState;
 
+  // BB: MUON ones that maybe need to be fixed???
+  friend class atom::api::Session;
+
   // END ALLOWED USAGE.
   // BEGIN USAGE THAT NEEDS TO BE FIXED.
   friend class ::chromeos::BlockingMethodCaller;  // http://crbug.com/125360
diff --git a/build/config/BUILDCONFIG.gn b/build/config/BUILDCONFIG.gn
index 78038b04ddf6d2fe0def8bf726198d3fabefab98..169b50a11b68b9ab027cd7bc81bde4dfff70dfbd 100644
--- a/build/config/BUILDCONFIG.gn
+++ b/build/config/BUILDCONFIG.gn
@@ -152,6 +152,8 @@ declare_args() {
   host_toolchain = ""
 
   # DON'T ADD MORE FLAGS HERE. Read the comment above.
+  # Build chromium without muon flags
+  muon_chromium_build = false
 }
 
 declare_args() {
@@ -530,6 +532,13 @@ default_compiler_configs = [
   "//build/config/coverage:default_coverage",
   "//build/config/sanitizers:default_sanitizer_flags",
 ]
+if (!muon_chromium_build) {
+  default_compiler_configs -= [ "//build/config/compiler:default_include_dirs" ]
+  default_compiler_configs += [
+    "//electron/build:muon_include_dirs",
+    "//build/config/compiler:default_include_dirs"
+  ]
+}
 if (is_win) {
   default_compiler_configs += [
     "//build/config/win:default_crt",
diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index 4bb4a043cbbcb562aed8926867660547cd7f018c..769bc73607b600d549b6185a37d6b0cc35ded9f6 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -11,6 +11,7 @@ declare_args() {
   # Break chrome.dll into multple pieces based on process type. Only available
   # on Windows.
   is_multi_dll_chrome = is_win && !is_component_build
+  branding_path_component = ""
 
   # Turn this on to generate order files. See
   # https://chromium.googlesource.com/chromium/src/+/master/docs/win_order_files.md
@@ -19,8 +20,10 @@ declare_args() {
 
 # Refers to the subdirectory for branding in various places including
 # chrome/app/theme.
+if (branding_path_component == "") {
 if (is_chrome_branded) {
   branding_path_component = "google_chrome"
 } else {
   branding_path_component = "chromium"
 }
+}
diff --git a/build/toolchain/mac/BUILD.gn b/build/toolchain/mac/BUILD.gn
index fc113d6a32c6d11e5676ce77011ef3aa55e916ef..97ca6793ffdc97b85074d40883cc650d0044b0ca 100644
--- a/build/toolchain/mac/BUILD.gn
+++ b/build/toolchain/mac/BUILD.gn
@@ -245,13 +245,15 @@ template("mac_toolchain") {
     }
 
     tool("alink") {
+      rspfile = "{{output}}.rsp"
       script =
           rebase_path("//build/toolchain/mac/filter_libtool.py", root_build_dir)
-      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} {{inputs}}"
+      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} -filelist \"$rspfile\""
       description = "LIBTOOL-STATIC {{output}}"
       outputs = [
         "{{output_dir}}/{{target_output_name}}{{output_extension}}",
       ]
+      rspfile_content = "{{inputs_newline}}"
       default_output_dir = "{{target_out_dir}}"
       default_output_extension = ".a"
       output_prefix = "lib"
diff --git a/build/toolchain/win/BUILD.gn b/build/toolchain/win/BUILD.gn
index 22054716fb117c152e0bc8348afebcc69c1ff882..6e15f961d722cd55124d8d148b92d64610ecc380 100644
--- a/build/toolchain/win/BUILD.gn
+++ b/build/toolchain/win/BUILD.gn
@@ -6,6 +6,7 @@ import("//build/config/clang/clang.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//build/config/win/visual_studio_version.gni")
+import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/clang_static_analyzer.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")
@@ -28,6 +29,8 @@ if (use_goma) {
   } else {
     goma_prefix = "$goma_dir/gomacc "
   }
+} else if (cc_wrapper != "") {
+  goma_prefix = "$cc_wrapper "
 } else {
   goma_prefix = ""
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 31dcbbf7fa304aa35eadac5a79ac4dd96e4ccd22..cbf87dacdf6d90ecbac7bf56165cad948dd2adaa 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -36,6 +36,11 @@ if (is_android) {
   import("//build/util/version.gni")
   import("//media/cdm/ppapi/cdm_paths.gni")
   import("//third_party/icu/config.gni")
+  if (!muon_chromium_build) {
+    # Avoid mac app/framework naming conflicts
+    chrome_product_full_name = "Google Chrome"
+    chrome_product_short_name = "Google Chrome"
+  }
 }
 
 assert(!is_ios, "Chromium/iOS shouldn't use anything in //chrome")
diff --git a/chrome/app/chrome_crash_reporter_client_win.cc b/chrome/app/chrome_crash_reporter_client_win.cc
index f4d987cd39e7269e9a3cef6c66179f80b0a8064d..65b8937627599e0e3894f0aff38a728e89382e93 100644
--- a/chrome/app/chrome_crash_reporter_client_win.cc
+++ b/chrome/app/chrome_crash_reporter_client_win.cc
@@ -91,6 +91,10 @@ size_t RegisterCrashKeysHelper() {
   // For now these need to be kept relatively up to date with those in
   // chrome/common/crash_keys.cc::RegisterChromeCrashKeys().
   static constexpr base::debug::CrashKey kFixedKeys[] = {
+      {"javascript-info", kHugeSize},
+      {"_version", kSmallSize},
+      {"muon-version", kSmallSize},
+      {"node-env", kSmallSize},
       {kMetricsClientId, kSmallSize},
       {kChannel, kSmallSize},
       {kActiveURL, kLargeSize},
diff --git a/chrome/browser/chrome_content_browser_manifest_overlay.json b/chrome/browser/chrome_content_browser_manifest_overlay.json
index e2faffbfcb27da0329d3e388fea8758d49139e8e..d8cdceffbc4b048395957dcae935a4c4fbac917a 100644
--- a/chrome/browser/chrome_content_browser_manifest_overlay.json
+++ b/chrome/browser/chrome_content_browser_manifest_overlay.json
@@ -12,7 +12,7 @@
           "extensions::StashService",
           "metrics::mojom::LeakDetector",
           "mojom::ModuleEventSink",
-          "rappor::mojom::RapporRecorder",
+//          "rappor::mojom::RapporRecorder",
           "safe_browsing::mojom::SafeBrowsing",
           "translate::mojom::ContentTranslateDriver"
         ],
diff --git a/chrome/browser/download/download_target_determiner.cc b/chrome/browser/download/download_target_determiner.cc
index 4f4dadd98fd997e9659d10e6989916dbb0bb899e..154fda998fc09854da13fef567fa43c5410efe40 100644
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -112,6 +112,9 @@ DownloadTargetDeterminer::DownloadTargetDeterminer(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(download_);
   DCHECK(delegate);
+#if !defined(MUON_CHROMIUM_BUILD)
+  next_state_ = STATE_CHECK_DOWNLOAD_URL;
+#endif
   download_->AddObserver(this);
 
   DoLoop();
@@ -328,6 +331,9 @@ DownloadTargetDeterminer::Result
   DCHECK(!virtual_path_.empty());
 
   next_state_ = STATE_PROMPT_USER_FOR_DOWNLOAD_PATH;
+#if !defined(MUON_CHROMIUM_BUILD)
+  next_state_ = STATE_DETERMINE_LOCAL_PATH;
+#endif
   if (download_->GetState() != DownloadItem::IN_PROGRESS)
     return CONTINUE;
 
@@ -450,6 +456,9 @@ DownloadTargetDeterminer::Result
   DCHECK(local_path_.empty());
 
   next_state_ = STATE_DETERMINE_MIME_TYPE;
+#if !defined(MUON_CHROMIUM_BUILD)
+  next_state_ = STATE_CHECK_VISITED_REFERRER_BEFORE;
+#endif
 
   delegate_->DetermineLocalPath(
       download_,
@@ -650,7 +659,11 @@ DownloadTargetDeterminer::Result
     DownloadTargetDeterminer::DoCheckDownloadUrl() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(!virtual_path_.empty());
+
   next_state_ = STATE_CHECK_VISITED_REFERRER_BEFORE;
+#if !defined(MUON_CHROMIUM_BUILD)
+  next_state_ = STATE_RESERVE_VIRTUAL_PATH;
+#endif
 
   // If user has validated a dangerous download, don't check.
   if (danger_type_ == content::DOWNLOAD_DANGER_TYPE_USER_VALIDATED)
@@ -730,6 +743,7 @@ void DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone(
   danger_level_ = GetDangerLevel(
       visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
   if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
+      danger_level_ != DownloadFileType::ALLOW_ON_USER_GESTURE &&
       danger_type_ == content::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
     danger_type_ = content::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   DoLoop();
diff --git a/chrome/browser/importer/external_process_importer_client.h b/chrome/browser/importer/external_process_importer_client.h
index 864a6951115dda5ed74963f18b35692960397d50..3e1a2b719521ac2c60bae05f94e409bc4c7da022 100644
--- a/chrome/browser/importer/external_process_importer_client.h
+++ b/chrome/browser/importer/external_process_importer_client.h
@@ -88,6 +88,8 @@ class ExternalProcessImporterClient
   void OnAutofillFormDataImportGroup(
       const std::vector<ImporterAutofillFormDataEntry>&
           autofill_form_data_entry_group) override;
+  void OnCookiesImportStart(uint32_t total_cookies_count) override {};
+  void OnCookiesImportGroup(const std::vector<ImportedCookieEntry>& cookies_group) override {};
   void OnIE7PasswordReceived(
       const importer::ImporterIE7PasswordInfo& importer_password_info) override;
 
diff --git a/chrome/browser/importer/external_process_importer_host.h b/chrome/browser/importer/external_process_importer_host.h
index 08c6f28746cc5f345114a942834db18f5c7a1d41..3a43ae76f054ba449e3b892ea752c62fdad2e5a3 100644
--- a/chrome/browser/importer/external_process_importer_host.h
+++ b/chrome/browser/importer/external_process_importer_host.h
@@ -74,7 +74,10 @@ class ExternalProcessImporterHost
 
  private:
   // ExternalProcessImporterHost deletes itself in OnImportEnded().
+ protected:
   ~ExternalProcessImporterHost() override;
+ private:
+  friend class BraveExternalProcessImporterHost;
 
   // Launches the utility process that starts the import task, unless bookmark
   // or template model are not yet loaded. If load is not detected, this method
diff --git a/chrome/browser/importer/in_process_importer_bridge.h b/chrome/browser/importer/in_process_importer_bridge.h
index 247d24220beb7d176b890d7c2d45bdd2dfd8db99..c270bba0fabb557e8d3d1df8ac166bbb00ed6e8b 100644
--- a/chrome/browser/importer/in_process_importer_bridge.h
+++ b/chrome/browser/importer/in_process_importer_bridge.h
@@ -68,7 +68,9 @@ class InProcessImporterBridge : public ImporterBridge {
   // End ImporterBridge implementation.
 
  private:
+ protected:
   ~InProcessImporterBridge() override;
+ private:
 
   ProfileWriter* const writer_;  // weak
   const base::WeakPtr<ExternalProcessImporterHost> host_;
diff --git a/chrome/browser/metrics/metrics_reporting_state.cc b/chrome/browser/metrics/metrics_reporting_state.cc
index 183a1e7a246c01a1500a9a05e055f892deaffe56..5172ed442244f26a674c650705d96282ae6ec836 100644
--- a/chrome/browser/metrics/metrics_reporting_state.cc
+++ b/chrome/browser/metrics/metrics_reporting_state.cc
@@ -60,6 +60,7 @@ void SetMetricsReporting(bool to_update_pref,
   g_browser_process->local_state()->SetBoolean(
       metrics::prefs::kMetricsReportingEnabled, updated_pref);
 
+#if defined(MUON_CHROMIUM_BUILD)
   UpdateMetricsPrefsOnPermissionChange(updated_pref);
 
   // Uses the current state of whether reporting is enabled to enable services.
@@ -71,6 +72,7 @@ void SetMetricsReporting(bool to_update_pref,
   } else {
     RecordMetricsReportingHistogramValue(METRICS_REPORTING_ERROR);
   }
+#endif
   if (!callback_fn.is_null())
     callback_fn.Run(updated_pref);
 }
diff --git a/chrome/browser/password_manager/password_store_factory.cc b/chrome/browser/password_manager/password_store_factory.cc
index 4605a11ecd9367cf49fb3f6320eaaae86d13833c..e1d24a3bc45622ba7b2a3fc68d49484948707777 100644
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -113,8 +113,10 @@ PasswordStoreFactory::PasswordStoreFactory()
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // TODO(crbug.com/715987). Remove when PasswordReuseDetector is decoupled
   // from PasswordStore.
+#if defined(MUON_CHROMIUM_BUILD)
   DependsOn(SigninManagerFactory::GetInstance());
 #endif
+#endif
 }
 
 PasswordStoreFactory::~PasswordStoreFactory() {}
@@ -264,12 +266,14 @@ PasswordStoreFactory::BuildServiceInstanceFor(
       ps.get(), profile->GetPrefs(),
       base::WrapRefCounted(profile->GetRequestContext()));
 
+#if defined(MUON_CHROMIUM_BUILD)
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
   std::unique_ptr<password_manager::PasswordStoreSigninNotifier> notifier =
       base::MakeUnique<password_manager::PasswordStoreSigninNotifierImpl>(
           profile);
   ps->SetPasswordStoreSigninNotifier(std::move(notifier));
+#endif
 #endif
 
   return ps;
diff --git a/chrome/browser/printing/print_view_manager_base.cc b/chrome/browser/printing/print_view_manager_base.cc
index bdc6e4d8ad876fafa8e72bfdccce909301c24010..89af1e66bed72965753849687710e762c2cd3fcd 100644
--- a/chrome/browser/printing/print_view_manager_base.cc
+++ b/chrome/browser/printing/print_view_manager_base.cc
@@ -65,13 +65,13 @@ namespace {
 
 void ShowWarningMessageBox(const base::string16& message) {
   // Runs always on the UI thread.
-  static bool is_dialog_shown = false;
-  if (is_dialog_shown)
-    return;
+  // static bool is_dialog_shown = false;
+  // if (is_dialog_shown)
+  //   return;
   // Block opening dialog from nested task.
-  base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
+  // base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
 
-  chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
+  // chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
 }
 
 }  // namespace
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.cc b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
index 5b98dda96e08f425ac1d63b119874f30be0d0ed9..1ae5ce0126b509b3d56aa84f23c75b69b2609864 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.cc
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
@@ -16,16 +16,19 @@
 #include "base/task_scheduler/post_task.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
+#if 0
 #include "chrome/browser/extensions/activity_log/activity_action_constants.h"
 #include "chrome/browser/extensions/activity_log/activity_actions.h"
 #include "chrome/browser/extensions/activity_log/activity_log.h"
 #include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
+#endif  // 0
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/extensions/chrome_extension_messages.h"
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "extensions/browser/extension_system.h"
+#include "extensions/browser/info_map.h"
 #include "extensions/common/extension_messages.h"
 #include "extensions/common/extension_set.h"
 #include "extensions/common/file_util.h"
@@ -41,6 +44,7 @@ const uint32_t kFilteredMessageClasses[] = {
     ChromeExtensionMsgStart, ExtensionMsgStart,
 };
 
+#if 0
 // Logs an action to the extension activity log for the specified profile.
 void AddActionToExtensionActivityLog(Profile* profile,
                                      extensions::ActivityLog* activity_log,
@@ -53,6 +57,7 @@ void AddActionToExtensionActivityLog(Profile* profile,
     action->set_page_incognito(profile->IsOffTheRecord());
   activity_log->LogAction(action);
 }
+#endif  // 0
 
 }  // namespace
 
@@ -63,7 +68,7 @@ ChromeExtensionMessageFilter::ChromeExtensionMessageFilter(
                            arraysize(kFilteredMessageClasses)),
       render_process_id_(render_process_id),
       profile_(profile),
-      activity_log_(extensions::ActivityLog::GetInstance(profile)),
+      // activity_log_(extensions::ActivityLog::GetInstance(profile)),
       extension_info_map_(
           extensions::ExtensionSystem::Get(profile)->info_map()) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -82,12 +87,14 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
   IPC_BEGIN_MESSAGE_MAP(ChromeExtensionMessageFilter, message)
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ExtensionHostMsg_GetMessageBundle,
                                     OnGetExtMessageBundle)
+#if 0
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
                         OnAddAPIActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
                         OnAddDOMActionToExtensionActivityLog);
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
                         OnAddEventToExtensionActivityLog);
+#endif  // 0
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
 
@@ -97,9 +104,11 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
 void ChromeExtensionMessageFilter::OverrideThreadForMessage(
     const IPC::Message& message, BrowserThread::ID* thread) {
   switch (message.type()) {
+#if 0
     case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
     case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
     case ExtensionHostMsg_AddEventToActivityLog::ID:
+#endif  // 0
       *thread = BrowserThread::UI;
       break;
     default:
@@ -181,6 +190,7 @@ void ChromeExtensionMessageFilter::OnGetExtMessageBundleAsync(
   Send(reply_msg);
 }
 
+#if 0
 void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
     const std::string& extension_id,
     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
@@ -231,6 +241,7 @@ void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
   }
   AddActionToExtensionActivityLog(profile_, activity_log_, action);
 }
+#endif  // 0
 
 void ChromeExtensionMessageFilter::Observe(
     int type,
@@ -238,7 +249,7 @@ void ChromeExtensionMessageFilter::Observe(
     const content::NotificationDetails& details) {
   DCHECK_EQ(chrome::NOTIFICATION_PROFILE_DESTROYED, type);
   profile_ = NULL;
-  activity_log_ = nullptr;
+  // activity_log_ = nullptr;
 }
 
 bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
@@ -247,7 +258,8 @@ bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
   // conditions (e.g. logging gets disabled but the renderer sends the message
   // before it gets updated), we still need this check here.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  return profile_ &&
-         g_browser_process->profile_manager()->IsValidProfile(profile_) &&
-         activity_log_ && activity_log_->ShouldLog(extension_id);
+  // return profile_ &&
+  //        g_browser_process->profile_manager()->IsValidProfile(profile_) &&
+  //        activity_log_ && activity_log_->ShouldLog(extension_id);
+  return false;
 }
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.h b/chrome/browser/renderer_host/chrome_extension_message_filter.h
index 663cda3f3413e5495f8ec77eaaf33c835cc00711..8c9b1fd5abe7fd3e17a3e98c479f056ccbe14a5b 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.h
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.h
@@ -54,6 +54,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
       const std::string& main_extension_id,
       const std::string& default_locale,
       IPC::Message* reply_msg);
+#if 0
   void OnAddAPIActionToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
@@ -66,6 +67,7 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
   void OnAddEventToExtensionActivityLog(
       const std::string& extension_id,
       const ExtensionHostMsg_APIActionOrEvent_Params& params);
+#endif  // 0
 
   // content::NotificationObserver implementation.
   void Observe(int type,
diff --git a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
index ff290214dcd4f4986dbcf05ec2bbd1b092a6e7ac..c407645321d7b16eb9e82e236a34d17bae079a7c 100644
--- a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
+++ b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -57,13 +57,13 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
         return std::unique_ptr<ResourceHost>(new MessageFilterHost(
             host_->GetPpapiHost(), instance, resource, pv_filter));
       }
-      case PpapiHostMsg_OutputProtection_Create::ID: {
-        scoped_refptr<ResourceMessageFilter> output_protection_filter(
-            new chrome::PepperOutputProtectionMessageFilter(host_, instance));
-        return std::unique_ptr<ResourceHost>(
-            new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
-                                  output_protection_filter));
-      }
+      // case PpapiHostMsg_OutputProtection_Create::ID: {
+      //   scoped_refptr<ResourceMessageFilter> output_protection_filter(
+      //       new chrome::PepperOutputProtectionMessageFilter(host_, instance));
+      //   return std::unique_ptr<ResourceHost>(
+      //       new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
+      //                             output_protection_filter));
+      // }
     }
   }
 
diff --git a/chrome/browser/resource_coordinator/tab_manager.cc b/chrome/browser/resource_coordinator/tab_manager.cc
index 216a3c3535da13bfbd2a22e80946d79a09a0559b..c69c17578dc379616a53e6df117597b748134e64 100644
--- a/chrome/browser/resource_coordinator/tab_manager.cc
+++ b/chrome/browser/resource_coordinator/tab_manager.cc
@@ -694,7 +694,8 @@ void TabManager::AddTabStats(const BrowserInfo& browser_info,
   TabStripModel* tab_strip_model = browser_info.tab_strip_model;
   for (int i = 0; i < tab_strip_model->count(); i++) {
     WebContents* contents = tab_strip_model->GetWebContentsAt(i);
-    if (!contents->IsCrashed()) {
+    // TODO(bridiver) - temporary workaround for pinned and unloaded tabs
+    if (contents && !contents->IsCrashed()) {
       TabStats stats;
       stats.is_app = browser_info.browser_is_app;
       stats.is_internal_page = IsInternalPage(contents->GetLastCommittedURL());
@@ -800,6 +801,17 @@ void TabManager::PurgeBackgroundedTabsIfNeeded() {
   }
 }
 
+// MUON(bridiver): see tab_manager.h
+WebContents* TabManager::CreateNullContents(
+    TabStripModel* model, WebContents* old_contents) {
+  return WebContents::Create(WebContents::CreateParams(model->profile()));
+}
+
+// MUON(bridiver): see tab_manager.h
+void TabManager::DestroyOldContents(WebContents* old_contents) {
+  delete old_contents;
+}
+
 WebContents* TabManager::DiscardWebContentsAt(int index,
                                               TabStripModel* model,
                                               DiscardReason reason) {
@@ -817,8 +829,7 @@ WebContents* TabManager::DiscardWebContentsAt(int index,
       "TabManager.Discarding.DiscardedTabHasBeforeUnloadHandler",
       old_contents->NeedToFireBeforeUnload());
 
-  WebContents* null_contents =
-      WebContents::Create(WebContents::CreateParams(model->profile()));
+  WebContents* null_contents = CreateNullContents(model, old_contents);
   // Copy over the state from the navigation controller to preserve the
   // back/forward history and to continue to display the correct title/favicon.
   //
@@ -878,7 +889,8 @@ WebContents* TabManager::DiscardWebContentsAt(int index,
   // TODO(jamescook): This breaks script connections with other tabs.
   // Find a different approach that doesn't do that, perhaps based on
   // RenderFrameProxyHosts.
-  delete old_contents;
+  // MUON(bridiver): see tab_manager.h
+  DestroyOldContents(old_contents);
 
   return null_contents;
 }
diff --git a/chrome/browser/resource_coordinator/tab_manager.h b/chrome/browser/resource_coordinator/tab_manager.h
index d85ddf9db90d332a31f839e7600b8d6e5ec61356..2dbe745b19001ce55631e625b6c597b2bd10903b 100644
--- a/chrome/browser/resource_coordinator/tab_manager.h
+++ b/chrome/browser/resource_coordinator/tab_manager.h
@@ -94,6 +94,11 @@ class TabManager : public TabStripModelObserver,
   TabManager();
   ~TabManager() override;
 
+  // MUON(bridiver): override to create/destroy guests webcontents
+  virtual content::WebContents* CreateNullContents(
+      TabStripModel* model, content::WebContents* old_contents);
+  virtual void DestroyOldContents(content::WebContents* old_contents);
+
   // Number of discard events since Chrome started.
   int discard_count() const { return discard_count_; }
 
@@ -301,6 +306,8 @@ class TabManager : public TabStripModelObserver,
   // min time to purge times this value.
   const int kDefaultMinMaxTimeToPurgeRatio = 4;
 
+  friend class GuestTabManager;
+
   // Finds TabStripModel which has a WebContents whose id is the given
   // |tab_id|, and returns the WebContents index and the TabStripModel.
   int FindTabStripModelById(int32_t tab_id, TabStripModel** model) const;
diff --git a/chrome/browser/safe_browsing/chrome_password_protection_service.h b/chrome/browser/safe_browsing/chrome_password_protection_service.h
index 9f9a34a962f52c4f9a56b1f0bd25ab350c5cdd05..fefa41dac43a699f3c8fe5b9ac2ef4df6496a451 100644
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.h
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.h
@@ -40,7 +40,7 @@ using url::Origin;
 void ShowPasswordReuseModalWarningDialog(
     content::WebContents* web_contents,
     ChromePasswordProtectionService* service,
-    OnWarningDone done_callback);
+    OnWarningDone done_callback) {}
 
 // Called by ChromeContentBrowserClient to create a
 // PasswordProtectionNavigationThrottle if appropriate.
diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
index 7d32a4cc7a0f1d2230d1f965431a291424ae0db1..ed699539f22fad86ad581553974079c9b68038a9 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
@@ -293,10 +293,12 @@ bool CheckClientDownloadRequest::IsSupportedDownload(
     return false;
   }
   // This check should be last, so we know the earlier checks passed.
+#if defined(MUON_CHROMIUM_BUILD)
   if (!FileTypePolicies::GetInstance()->IsCheckedBinaryFile(target_path)) {
     *reason = REASON_NOT_BINARY_FILE;
     return false;
   }
+#endif
   *type = download_protection_util::GetDownloadType(target_path);
   return true;
 }
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index dadf0a941c71b1ec2e5cae6934246f9e6d7ebb89..34f323d8f0ef6150110463bb199075a96e5cd130 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -500,6 +500,12 @@ static_library("common") {
     ]
     public_deps += [ "//chrome/common:version_header" ]
   }
+
+  if (!muon_chromium_build && enable_extensions) {
+    sources -= [
+      "extensions/chrome_extensions_client.cc",
+    ]
+  }
 }
 
 process_version("version_header") {
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index f32ffad1a95bc31b6571a624333420e88d98913a..dd2a26b9ae57459e0bbd1b558d2721f2f21dea81 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #if defined(GOOGLE_CHROME_BUILD)
-#define PRODUCT_STRING "Google Chrome"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #else
 #error Unknown branding
 #endif
@@ -43,13 +43,13 @@ const char kChromeVersion[] = CHROME_VERSION_STRING;
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -61,7 +61,7 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
     FPL(PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
 // NOTE: Keep it synced with the process names defined in AndroidManifest.xml.
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL("");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
@@ -69,8 +69,8 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -80,13 +80,13 @@ const base::FilePath::CharType kHelperProcessExecutableName[] = FPL("exe");
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -98,19 +98,19 @@ const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
     FPL(PRODUCT_STRING " Helper.app/Contents/MacOS/" PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 #endif  // OS_*
 
 #if defined(OS_MACOSX)
@@ -121,7 +121,7 @@ const base::FilePath::CharType kFrameworkExecutableName[] =
 #endif  // OS_MACOSX
 
 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("brave.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
     FPL("Chrome_StatusTrayWindow");
 #endif  // defined(OS_WIN)
diff --git a/chrome/common/chrome_paths_mac.mm b/chrome/common/chrome_paths_mac.mm
index cca3bbb41ae25484c3e87c9aba09a8b07741e2b2..57abbcfd90dab7bbf1b5dffc35b17d3ade1a5e1e 100644
--- a/chrome/common/chrome_paths_mac.mm
+++ b/chrome/common/chrome_paths_mac.mm
@@ -40,7 +40,9 @@
 
   // From C.app/Contents/Versions/1.2.3.4, go up three steps to get to C.app.
   base::FilePath versioned_dir = chrome::GetVersionedDirectory();
-  base::FilePath outer_app_dir = versioned_dir.DirName().DirName().DirName();
+  // electron uses Frameworks in place of Versions/1.2.3.4
+  // TODO(bridiver) - change this to match chrome
+  base::FilePath outer_app_dir = versioned_dir.DirName().DirName();
   const char* outer_app_dir_c = outer_app_dir.value().c_str();
   NSString* outer_app_dir_ns = [NSString stringWithUTF8String:outer_app_dir_c];
 
diff --git a/chrome/common/chrome_version.h.in b/chrome/common/chrome_version.h.in
index f0a0bcd0098ec31b18bb00588ad8fd11b439fd6f..888572f87a71e6e8444bd6a302343e453aef4287 100644
--- a/chrome/common/chrome_version.h.in
+++ b/chrome/common/chrome_version.h.in
@@ -22,3 +22,5 @@
 // Changelist Information
 
 #define LASTCHANGE_STRING "@LASTCHANGE@"
+
+#define EXECUTABLE_NAME "@EXECUTABLE_NAME@"
diff --git a/chrome/common/crash_keys.cc b/chrome/common/crash_keys.cc
index 63177231642327235adf4f6d26914db56a925ccd..634722cedb0fc105d7458585775bfd969df8e631 100644
--- a/chrome/common/crash_keys.cc
+++ b/chrome/common/crash_keys.cc
@@ -94,6 +94,12 @@ size_t RegisterChromeCrashKeys() {
   //     RegisterWebViewCrashKeys(),
   // chromecast/crash/cast_crash_keys.cc::RegisterCastCrashKeys().
   base::debug::CrashKey fixed_keys[] = {
+#if !defined(MUON_CHROMIUM_BUILD)
+    {"javascript-info", kHugeSize},
+    {"_version", kSmallSize},
+    {"muon-version", kSmallSize},
+    {"node-env", kSmallSize},
+#endif
 #if defined(OS_MACOSX) || defined(OS_WIN)
     {kMetricsClientId, kSmallSize},
 #else
diff --git a/chrome/common/importer/edge_importer_utils_win.cc b/chrome/common/importer/edge_importer_utils_win.cc
index c2abd64b2d7c5166c1fdbaaf782974cb4bcc5e53..eb59bbe098dabd0edd3d9d8e24befe1006e56b8b 100644
--- a/chrome/common/importer/edge_importer_utils_win.cc
+++ b/chrome/common/importer/edge_importer_utils_win.cc
@@ -73,7 +73,9 @@ bool IsEdgeFavoritesLegacyMode() {
   // for its favorites.
   if (key.ReadValueDW(L"FavoritesESEEnabled", &ese_enabled) == ERROR_SUCCESS)
     return !ese_enabled;
-  return true;
+  // return true;
+  // No value to read means not legacy mode
+  return false;
 }
 
 bool EdgeImporterCanImport() {
diff --git a/chrome/common/importer/importer_data_types.h b/chrome/common/importer/importer_data_types.h
index 0fc90c62398a93eb89568ce78c8ded2bc9b232b6..50a7d3c0079b7e9c5bc38a4ae3b25eef6d024169 100644
--- a/chrome/common/importer/importer_data_types.h
+++ b/chrome/common/importer/importer_data_types.h
@@ -83,6 +83,7 @@ enum VisitSource {
   VISIT_SOURCE_FIREFOX_IMPORTED = 1,
   VISIT_SOURCE_IE_IMPORTED = 2,
   VISIT_SOURCE_SAFARI_IMPORTED = 3,
+  VISIT_SOURCE_CHROME_IMPORTED = 4,
 };
 
 }  // namespace importer
diff --git a/chrome/common/importer/importer_type.h b/chrome/common/importer/importer_type.h
index c172f8a5bc534465ff4d063a52f9bb510b7e36af..437026ae26eec5dce80edb73929a0fbce870cc37 100644
--- a/chrome/common/importer/importer_type.h
+++ b/chrome/common/importer/importer_type.h
@@ -19,6 +19,8 @@ enum ImporterType {
   TYPE_IE              = 0,
 #endif
   // Value 1 was the (now deleted) Firefox 2 profile importer.
+  // We use it for chrome profile now.
+  TYPE_CHROME          = 1,
   TYPE_FIREFOX         = 2,
 #if defined(OS_MACOSX)
   TYPE_SAFARI          = 3,
diff --git a/chrome/common/importer/profile_import.mojom b/chrome/common/importer/profile_import.mojom
index d5fa210c58244a5c9bc2aed4fa80d903920f604e..3f24c00ba2024fb1a6553d4fc69dae5f71c4d08c 100644
--- a/chrome/common/importer/profile_import.mojom
+++ b/chrome/common/importer/profile_import.mojom
@@ -17,6 +17,9 @@ struct ImportedBookmarkEntry;
 [Native]
 struct ImporterAutofillFormDataEntry;
 
+[Native]
+struct ImportedCookieEntry;
+
 [Native]
 struct SearchEngineInfo;
 
@@ -65,6 +68,8 @@ interface ProfileImportObserver {
   OnAutofillFormDataImportStart(uint32 total_autofill_form_data_entry_count);
   OnAutofillFormDataImportGroup(
       array<ImporterAutofillFormDataEntry> autofill_form_data_entry_group);
+  OnCookiesImportStart(uint32 total_cookies_count);
+  OnCookiesImportGroup(array<ImportedCookieEntry> cookies_group);
   // Windows only:
   OnIE7PasswordReceived(ImporterIE7PasswordInfo importer_password_info);
 };
diff --git a/chrome/common/importer/profile_import.typemap b/chrome/common/importer/profile_import.typemap
index 6283f2bf6871a10f710694772b5da0bc9b70c2ad..d5d1de309cb50eb9f8757d32d0eec3b42d08f9c0 100644
--- a/chrome/common/importer/profile_import.typemap
+++ b/chrome/common/importer/profile_import.typemap
@@ -9,6 +9,7 @@ public_headers = [
   "//chrome/common/importer/importer_data_types.h",
   "//chrome/common/importer/importer_url_row.h",
   "//components/favicon_base/favicon_usage_data.h",
+  "//electron/brave/common/importer/imported_cookie_entry.h",
 ]
 traits_headers =
     [ "//chrome/common/importer/profile_import_process_param_traits.h" ]
@@ -26,4 +27,5 @@ type_mappings = [
   "chrome.mojom.SearchEngineInfo=::importer::SearchEngineInfo",
   "chrome.mojom.SourceProfile=::importer::SourceProfile",
   "chrome.mojom.ImportItem=::importer::ImportItem",
+  "chrome.mojom.ImportedCookieEntry=::ImportedCookieEntry",
 ]
diff --git a/chrome/common/importer/profile_import_process_param_traits_macros.h b/chrome/common/importer/profile_import_process_param_traits_macros.h
index dd005641f4349c017bc65d843d8fe49ec6122f64..07777f1b956cc00ccd679ae88a1c733afa9c74cc 100644
--- a/chrome/common/importer/profile_import_process_param_traits_macros.h
+++ b/chrome/common/importer/profile_import_process_param_traits_macros.h
@@ -23,6 +23,7 @@
 #include "components/favicon_base/favicon_usage_data.h"
 #include "content/public/common/common_param_traits.h"
 #include "ipc/ipc_message_macros.h"
+#include "electron/brave/common/importer/imported_cookie_entry.h"
 
 #if defined(OS_WIN)
 IPC_ENUM_TRAITS_MIN_MAX_VALUE(importer::ImporterType,
@@ -91,4 +92,14 @@ IPC_STRUCT_TRAITS_BEGIN(importer::ImporterIE7PasswordInfo)
   IPC_STRUCT_TRAITS_MEMBER(date_created)
 IPC_STRUCT_TRAITS_END()
 
+IPC_STRUCT_TRAITS_BEGIN(ImportedCookieEntry)
+  IPC_STRUCT_TRAITS_MEMBER(domain)
+  IPC_STRUCT_TRAITS_MEMBER(name)
+  IPC_STRUCT_TRAITS_MEMBER(value)
+  IPC_STRUCT_TRAITS_MEMBER(host)
+  IPC_STRUCT_TRAITS_MEMBER(path)
+  IPC_STRUCT_TRAITS_MEMBER(expiry_date)
+  IPC_STRUCT_TRAITS_MEMBER(secure)
+  IPC_STRUCT_TRAITS_MEMBER(httponly)
+IPC_STRUCT_TRAITS_END()
 #endif  // CHROME_COMMON_IMPORTER_PROFILE_IMPORT_PROCESS_PARAM_TRAITS_MACROS_H_
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..051851c40e6b721035c6b57ed5b359624d55e525 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -80,6 +80,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
     @"Chromium": @"Chromium",
+    @"Brave": @"Brave",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
   };
diff --git a/chrome/common/media/cdm_host_file_path.cc b/chrome/common/media/cdm_host_file_path.cc
index 7d8030b41998f5075c39554763edca87b8120230..29fdd5664b5231647ee34c7331ef864682e97187 100644
--- a/chrome/common/media/cdm_host_file_path.cc
+++ b/chrome/common/media/cdm_host_file_path.cc
@@ -18,7 +18,7 @@
 #include "chrome/common/chrome_constants.h"
 #endif
 
-#if defined(GOOGLE_CHROME_BUILD)
+#if defined(GOOGLE_CHROME_BUILD) || !defined(MUON_CHROMIUM_BUILD)
 
 namespace {
 
diff --git a/chrome/install_static/user_data_dir.cc b/chrome/install_static/user_data_dir.cc
index b5f779d03cfec8ce1db9354d85020acaa10c3a5b..04db5469f8b3705bbf0c36fe6eef5ce1aeaa3355 100644
--- a/chrome/install_static/user_data_dir.cc
+++ b/chrome/install_static/user_data_dir.cc
@@ -74,6 +74,10 @@ bool GetUserDataDirectoryUsingProcessCommandLine(
 // Unify this with the Browser Distribution code.
 bool GetDefaultUserDataDirectory(const InstallConstants& mode,
                                  std::wstring* result) {
+#if !defined(MUON_CHROMIUM_BUILD)
+  result->append(GetEnvironmentString16(L"CHROME_USER_DATA_DIR"));
+  return true;
+#endif
   // This environment variable should be set on Windows Vista and later
   // (https://msdn.microsoft.com/library/windows/desktop/dd378457.aspx).
   std::wstring user_data_dir = GetEnvironmentString16(L"LOCALAPPDATA");
diff --git a/chrome/installer/util/browser_distribution.cc b/chrome/installer/util/browser_distribution.cc
index ac6a3e41ef2c4e82eab088b39abc0d17c4db0f0e..5149d6638b5146d8dc21aed5cc508d613c26fd69 100644
--- a/chrome/installer/util/browser_distribution.cc
+++ b/chrome/installer/util/browser_distribution.cc
@@ -20,6 +20,10 @@
 #include "chrome/installer/util/l10n_string_util.h"
 #include "chrome/installer/util/non_updating_app_registration_data.h"
 
+#if !defined(MUON_CHROMIUM_BUILD)
+#include "chrome/installer/util/muon_distribution.h"
+#endif
+
 namespace {
 
 // The BrowserDistribution object is never freed.
@@ -55,6 +59,7 @@ BrowserDistribution* BrowserDistribution::GetOrCreateBrowserDistribution(
 BrowserDistribution* BrowserDistribution::GetDistribution() {
   BrowserDistribution* dist = NULL;
 
+#if defined(MUON_CHROMIUM_BUILD)
 #if defined(GOOGLE_CHROME_BUILD)
   dist = GetOrCreateBrowserDistribution<GoogleChromeDistribution>(
       &g_browser_distribution);
@@ -62,7 +67,10 @@ BrowserDistribution* BrowserDistribution::GetDistribution() {
   dist = GetOrCreateBrowserDistribution<BrowserDistribution>(
       &g_browser_distribution);
 #endif
-
+#else
+  dist = GetOrCreateBrowserDistribution<MuonDistribution>(
+      &g_browser_distribution);
+#endif
   return dist;
 }
 
diff --git a/chrome/installer/util/prebuild/create_string_rc.py b/chrome/installer/util/prebuild/create_string_rc.py
index d7734d8883c3e438ece3d509b7bb331931831178..6e6cdda19c271de7e5429db02b3e17b2d676b46f 100755
--- a/chrome/installer/util/prebuild/create_string_rc.py
+++ b/chrome/installer/util/prebuild/create_string_rc.py
@@ -109,6 +109,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_APP_SHORTCUTS_SUBDIR_NAME',
     ],
+    'brave': [
+      'IDS_APP_SHORTCUTS_SUBDIR_NAME',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_DESCRIPTION': {
     'google_chrome': [
@@ -120,6 +123,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_DESCRIPTION',
+    ],
   },
   'IDS_INBOUND_MDNS_RULE_NAME': {
     'google_chrome': [
@@ -131,6 +137,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_INBOUND_MDNS_RULE_NAME',
     ],
+    'brave': [
+      'IDS_INBOUND_MDNS_RULE_NAME',
+    ],
   },
   # In contrast to the strings above, this one (IDS_PRODUCT_NAME) is used
   # throughout Chrome in mode-independent contexts. Within the installer (the
@@ -146,6 +155,9 @@ MODE_SPECIFIC_STRINGS = {
     'chromium': [
       'IDS_PRODUCT_NAME',
     ],
+    'brave': [
+      'IDS_PRODUCT_NAME',
+    ],
   },
 }
 # Note: Update the test expectations in GetBaseMessageIdForMode.GoogleStringIds
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index da3b9d31a05b659d4326c19ad2bc340a5ee8afdc..05d7168c3650e23a36cb19e74a7b0b69c951bfa6 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -407,6 +407,19 @@ static_library("renderer") {
       "searchbox/searchbox_extension.h",
     ]
   }
+
+  if (!muon_chromium_build) {
+    sources -= [
+      "content_settings_observer.cc",
+      "content_settings_observer.h",
+    ]
+
+    if (enable_extensions) {
+      sources -= [
+        "extensions/chrome_extensions_dispatcher_delegate.cc",
+      ]
+    }
+  }
 }
 
 static_library("test_support") {
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 5dc888bfb2dfa97e7f17da006abfdee25721ee0f..fd4a17233cdf3e4a88665a1026f1c8313a1e35e6 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1546,6 +1546,7 @@ ChromeContentRendererClient::CreateBrowserPluginDelegate(
 #endif
 }
 
+#if 0
 void ChromeContentRendererClient::RecordRappor(const std::string& metric,
                                                const std::string& sample) {
   if (!rappor_recorder_) {
@@ -1563,6 +1564,7 @@ void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
   }
   rappor_recorder_->RecordRapporURL(metric, url);
 }
+#endif  // 0
 
 void ChromeContentRendererClient::AddImageContextMenuProperties(
     const WebURLResponse& response,
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 94273919e238000a4b284b9b903abe72e7998866..2303caf42e218583169de86dc5aeea5d70c97539 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -192,9 +192,9 @@ class ChromeContentRendererClient
       content::RenderFrame* render_frame,
       const std::string& mime_type,
       const GURL& original_url) override;
-  void RecordRappor(const std::string& metric,
-                    const std::string& sample) override;
-  void RecordRapporURL(const std::string& metric, const GURL& url) override;
+  //void RecordRappor(const std::string& metric,
+  //                  const std::string& sample) override;
+  //void RecordRapporURL(const std::string& metric, const GURL& url) override;
   void AddImageContextMenuProperties(
       const blink::WebURLResponse& response,
       bool is_image_in_context_a_placeholder_image,
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 12d432198186daf817c0b903af985b05ce17cda2..ddbfdb1765d6f8505c35a70b9465b99d8245a529 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -100,11 +100,11 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   // time of the corresponding instance's method calls.  Currently these
   // interfaces are available only for whitelisted apps which may not have
   // access to the other private interfaces.
-  switch (message.type()) {
-    case PpapiHostMsg_UMA_Create::ID: {
-      return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
-    }
-  }
+  // switch (message.type()) {
+  //   case PpapiHostMsg_UMA_Create::ID: {
+  //     return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
+  //   }
+  // }
 
   return nullptr;
 }
diff --git a/chrome/utility/importer/external_process_importer_bridge.h b/chrome/utility/importer/external_process_importer_bridge.h
index 7e05c4e04f8e61b418d373a73bd8901347df4c76..e7e6d9fa5e0d54c7755fe3a38eca6f70a902411c 100644
--- a/chrome/utility/importer/external_process_importer_bridge.h
+++ b/chrome/utility/importer/external_process_importer_bridge.h
@@ -86,6 +86,7 @@ class ExternalProcessImporterBridge : public ImporterBridge {
 
  private:
   ~ExternalProcessImporterBridge() override;
+  friend class BraveExternalProcessImporterBridge;
 
   // Holds strings needed by the external importer because the resource
   // bundle isn't available to the external process.
diff --git a/chrome/utility/importer/firefox_importer.cc b/chrome/utility/importer/firefox_importer.cc
index 639578369d6d85e9697f141a93cc0598f54c7a37..dd73d4bc9b1dd40418c26bab10e539b7c524aaaa 100644
--- a/chrome/utility/importer/firefox_importer.cc
+++ b/chrome/utility/importer/firefox_importer.cc
@@ -144,14 +144,12 @@ void FirefoxImporter::StartImport(const importer::SourceProfile& source_profile,
   if ((items & importer::PASSWORDS) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::PASSWORDS);
     ImportPasswords();
-    bridge_->NotifyItemEnded(importer::PASSWORDS);
   }
   if ((items & importer::AUTOFILL_FORM_DATA) && !cancelled()) {
     bridge_->NotifyItemStarted(importer::AUTOFILL_FORM_DATA);
     ImportAutofillFormData();
     bridge_->NotifyItemEnded(importer::AUTOFILL_FORM_DATA);
   }
-  bridge_->NotifyEnded();
 }
 
 void FirefoxImporter::ImportHistory() {
diff --git a/chrome/utility/importer/firefox_importer.h b/chrome/utility/importer/firefox_importer.h
index c3f648f165483a2d618438c1a4ef1b35ad6fb10c..3c95e1256465b7b6a009d3bf7619c8f48e2d3d94 100644
--- a/chrome/utility/importer/firefox_importer.h
+++ b/chrome/utility/importer/firefox_importer.h
@@ -43,7 +43,9 @@ class FirefoxImporter : public Importer {
  private:
   using FaviconMap = std::map<int64_t, std::set<GURL>>;
 
+ protected:
   ~FirefoxImporter() override;
+ private:
 
   FRIEND_TEST_ALL_PREFIXES(FirefoxImporterTest, ImportBookmarksV25);
   void ImportBookmarks();
diff --git a/chrome/utility/importer/profile_import_impl.h b/chrome/utility/importer/profile_import_impl.h
index 4fb2499aa536d3618df2bbc4072fb23420f42c2e..65b6268d8d85545799a6a47e59b4adb7c0e5fa45 100644
--- a/chrome/utility/importer/profile_import_impl.h
+++ b/chrome/utility/importer/profile_import_impl.h
@@ -35,6 +35,7 @@ class ProfileImportImpl : public chrome::mojom::ProfileImport {
   ~ProfileImportImpl() override;
 
  private:
+  friend class BraveProfileImportImpl;
   // chrome::mojom::ProfileImport:
   void StartImport(const importer::SourceProfile& source_profile,
                    uint16_t items,
diff --git a/chrome/utility/importer/profile_import_service.h b/chrome/utility/importer/profile_import_service.h
index c4c5f83886574956b3abdfa77a07500a2ee6de9e..edbfde3c41a1e38bcdedd09aaa41d8a1ab3ab03b 100644
--- a/chrome/utility/importer/profile_import_service.h
+++ b/chrome/utility/importer/profile_import_service.h
@@ -24,6 +24,7 @@ class ProfileImportService : public service_manager::Service {
                        mojo::ScopedMessagePipeHandle interface_pipe) override;
 
  private:
+  friend class BraveProfileImportService;
   // State needed to manage service lifecycle and lifecycle of bound clients.
   std::unique_ptr<service_manager::ServiceContextRefFactory> ref_factory_;
   service_manager::BinderRegistry registry_;
diff --git a/components/crash/content/app/breakpad_linux.cc b/components/crash/content/app/breakpad_linux.cc
index 42a50e8381c196b310024c82d69a1a529ead0ba6..c3bafffe4c3d04b02d9f6fb33b3711782c782e50 100644
--- a/components/crash/content/app/breakpad_linux.cc
+++ b/components/crash/content/app/breakpad_linux.cc
@@ -87,8 +87,10 @@ namespace breakpad {
 
 namespace {
 
-#if !defined(OS_CHROMEOS)
+#if !defined(OS_CHROMEOS) && defined(MUON_CHROMIUM_BUILD)
 const char kUploadURL[] = "https://clients2.google.com/cr/report";
+#else
+const char kUploadURL[] = "https://laptop-updates.brave.com/1/crashes";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
@@ -1357,6 +1359,7 @@ void ExecUploadProcessOrTerminate(const BreakpadInfo& info,
     header_content_type,
     post_file,
     kUploadURL,
+    "--quiet",
     "--timeout=10",  // Set a timeout so we don't hang forever.
     "--tries=1",     // Don't retry if the upload fails.
     "-O",  // Output reply to the file descriptor path.
@@ -1899,6 +1902,7 @@ void HandleCrashDump(const BreakpadInfo& info) {
 
         const size_t kCrashIdLength = 16;
         char id_buf[kCrashIdLength + 1];
+
         size_t bytes_read =
             WaitForCrashReportUploadProcess(fds[0], kCrashIdLength, id_buf);
         HandleCrashReportId(id_buf, bytes_read, kCrashIdLength);
diff --git a/components/crash/content/app/crashpad_mac.mm b/components/crash/content/app/crashpad_mac.mm
index 485c2b4b3e98244f6303c92394dd0f6eab7263c6..5b530d7a32df23537d3b59e03f3729759a937254 100644
--- a/components/crash/content/app/crashpad_mac.mm
+++ b/components/crash/content/app/crashpad_mac.mm
@@ -55,6 +55,8 @@
       // Only allow the possibility of report upload in official builds. This
       // crash server won't have symbols for any other build types.
       std::string url = "https://clients2.google.com/cr/report";
+#elif !defined(MUON_CHROMIUM_BUILD)
+      std::string url = "https://laptop-updates.brave.com/1/crashes";
 #else
       std::string url;
 #endif
diff --git a/components/crash/content/app/crashpad_win.cc b/components/crash/content/app/crashpad_win.cc
index 3a33c9bb8e92e05feed4fcec486dcbac0fccbf38..2e6bc1ce62a7e12f16ee0a791ef2edb25390d3ff 100644
--- a/components/crash/content/app/crashpad_win.cc
+++ b/components/crash/content/app/crashpad_win.cc
@@ -82,6 +82,8 @@ base::FilePath PlatformCrashpadInitialization(
 
 #if defined(GOOGLE_CHROME_BUILD)
     std::string url = "https://clients2.google.com/cr/report";
+#elif !defined(MUON_CHROMIUM_BUILD)
+    std::string url = "https://laptop-updates.brave.com/1/crashes";
 #else
     std::string url;
 #endif
diff --git a/components/crash/core/browser/resources/crashes.js b/components/crash/core/browser/resources/crashes.js
index dbd2ae8df59756c61d28091cff70098c897db8f4..84fbc695c817c87deb902d8b6f69d3f1ec762ccb 100644
--- a/components/crash/core/browser/resources/crashes.js
+++ b/components/crash/core/browser/resources/crashes.js
@@ -105,9 +105,9 @@ function updateCrashList(
         // https://bugs.chromium.org/p/monorail/issues/detail?id=1488 is done.
         labels: 'Restrict-View-EditIssue,Stability-Crash,User-Submitted',
       };
-      var href = 'https://code.google.com/p/chromium/issues/entry';
+      var href = 'https://github.com/brave/browser-laptop/issues/new';
       for (var param in params) {
-        href = appendParam(href, param, params[param]);
+        // href = appendParam(href, param, params[param]);
       }
       link.href = href;
       link.target = '_blank';
diff --git a/components/guest_view/browser/guest_view_base.cc b/components/guest_view/browser/guest_view_base.cc
index e4bf5148ebe8abfdf1fb98a486cbfd973e82eab4..d0a0800aa272709f100749a31bbd15edbc65dde8 100644
--- a/components/guest_view/browser/guest_view_base.cc
+++ b/components/guest_view/browser/guest_view_base.cc
@@ -439,8 +439,12 @@ void GuestViewBase::DidDetach() {
   owner_web_contents()->GetRenderViewHost()->Send(
       new GuestViewMsg_GuestDetached(element_instance_id_));
   element_instance_id_ = kInstanceIDNone;
-  if (ShouldDestroyOnDetach())
+  if (ShouldDestroyOnDetach()) {
     Destroy(true);
+  } else {
+    // Give the derived class an opportunity to perform some actions.
+    DidDetachFromEmbedder();
+  }
 }
 
 WebContents* GuestViewBase::GetOwnerWebContents() const {
diff --git a/components/guest_view/browser/guest_view_base.h b/components/guest_view/browser/guest_view_base.h
index ae27d9f7908e6ee6ccc348e4b13e80fd1a0655d6..1bad3ca49917499bd08a4572563844da9f27341c 100644
--- a/components/guest_view/browser/guest_view_base.h
+++ b/components/guest_view/browser/guest_view_base.h
@@ -247,6 +247,9 @@ class GuestViewBase : public content::BrowserPluginGuestDelegate,
   // an opportunity to perform setup actions after attachment.
   virtual void DidAttachToEmbedder() {}
 
+  // This method is called after the guest has been detached from an embedder
+  virtual void DidDetachFromEmbedder() {}
+
   // This method is called after this GuestViewBase has been initiated.
   //
   // This gives the derived class an opportunity to perform additional
diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
index 0738b6917057019a9e006a3a34fcf6164017cb46..ce3de6082c9ad8014d80a216f0c23c06d929d354 100644
--- a/components/guest_view/browser/guest_view_manager.cc
+++ b/components/guest_view/browser/guest_view_manager.cc
@@ -67,6 +67,9 @@ class GuestViewManager::EmbedderRenderProcessHostObserver
   int id_;
 };
 
+// static
+GuestViewManager* manager_ = nullptr;
+
 GuestViewManager::GuestViewManager(
     content::BrowserContext* context,
     std::unique_ptr<GuestViewManagerDelegate> delegate)
@@ -90,8 +93,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
     } else {
       guest_manager = new GuestViewManager(context, std::move(delegate));
     }
-    context->SetUserData(kGuestViewManagerKeyName,
-                         base::WrapUnique(guest_manager));
+    manager_ = guest_manager;
+    //context->SetUserData(kGuestViewManagerKeyName,
+    //                     base::WrapUnique(guest_manager));
   }
   return guest_manager;
 }
@@ -99,8 +103,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
 // static
 GuestViewManager* GuestViewManager::FromBrowserContext(
     BrowserContext* context) {
-  return static_cast<GuestViewManager*>(context->GetUserData(
-      kGuestViewManagerKeyName));
+  //return static_cast<GuestViewManager*>(context->GetUserData(
+  //    kGuestViewManagerKeyName));
+  return manager_;
 }
 
 // static
diff --git a/components/metrics/metrics_service_accessor.cc b/components/metrics/metrics_service_accessor.cc
index 467210af09ccba687fad513c5a43047a43a7e5a0..a109474bc5988060884257bfeca93a8360c40529 100644
--- a/components/metrics/metrics_service_accessor.cc
+++ b/components/metrics/metrics_service_accessor.cc
@@ -16,7 +16,7 @@ namespace metrics {
 // static
 bool MetricsServiceAccessor::IsMetricsReportingEnabled(
     PrefService* pref_service) {
-#if defined(GOOGLE_CHROME_BUILD)
+#if defined(GOOGLE_CHROME_BUILD) || !defined(MUON_CHROMIUM_BUILD)
   // In official builds, disable metrics when reporting field trials are
   // forced; otherwise, use the value of the user's preference to determine
   // whether to enable metrics reporting.
diff --git a/components/os_crypt/key_storage_libsecret.cc b/components/os_crypt/key_storage_libsecret.cc
index 37fd8bb397ae6728e3e8118771d3308c64f15496..4d820452701989859af78a377c2a1551792f7a2d 100644
--- a/components/os_crypt/key_storage_libsecret.cc
+++ b/components/os_crypt/key_storage_libsecret.cc
@@ -5,6 +5,7 @@
 #include "components/os_crypt/key_storage_libsecret.h"
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/rand_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "components/os_crypt/libsecret_util_linux.h"
@@ -75,6 +76,12 @@ std::string KeyStorageLibsecret::AddRandomPasswordInLibsecret() {
 std::string KeyStorageLibsecret::GetKeyImpl() {
   GError* error = nullptr;
   LibsecretAttributesBuilder attrs;
+  const char *kApplicationName;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    kApplicationName = "chrome";
+  } else {
+    kApplicationName = ::kApplicationName;
+  }
   attrs.Append("application", kApplicationName);
   GList* search_results = LibsecretLoader::secret_service_search_sync(
       nullptr /* default secret service */, &kKeystoreSchemaV2, attrs.Get(),
diff --git a/components/os_crypt/keychain_password_mac.mm b/components/os_crypt/keychain_password_mac.mm
index 2b38db266f9aa1f4141c8649c021042ede4e5589..ea0387b11f4b00f87596d738c152aa4cc43b2beb 100644
--- a/components/os_crypt/keychain_password_mac.mm
+++ b/components/os_crypt/keychain_password_mac.mm
@@ -7,6 +7,7 @@
 #import <Security/Security.h>
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/mac/mac_logging.h"
 #include "base/rand_util.h"
 #include "crypto/apple_keychain.h"
@@ -61,6 +62,14 @@
 std::string KeychainPassword::GetPassword() const {
   UInt32 password_length = 0;
   void* password_data = NULL;
+  const char *service_name, *account_name;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("import-chrome")) {
+    service_name = "Chrome Safe Storage";
+    account_name = "Chrome";
+  } else {
+    service_name = ::KeychainPassword::service_name;
+    account_name = ::KeychainPassword::account_name;
+  }
   OSStatus error = keychain_.FindGenericPassword(
       nullptr, strlen(service_name), service_name, strlen(account_name),
       account_name, &password_length, &password_data, NULL);
diff --git a/components/ssl_config/ssl_config_service_manager_pref.cc b/components/ssl_config/ssl_config_service_manager_pref.cc
index b96163ba1ad65dd5e353b360961c22abc6f447a9..be7259ca17b6d1fd07d36a80d165f8f5e8e9c9ac 100644
--- a/components/ssl_config/ssl_config_service_manager_pref.cc
+++ b/components/ssl_config/ssl_config_service_manager_pref.cc
@@ -301,10 +301,14 @@ void SSLConfigServiceManagerPref::GetSSLConfigFromPrefs(
     net::SSLConfig* config) {
   // rev_checking_enabled was formerly a user-settable preference, but now
   // it is managed-only.
+#if defined(MUON_CHROMIUM_BUILD)
   if (rev_checking_enabled_.IsManaged())
     config->rev_checking_enabled = rev_checking_enabled_.GetValue();
   else
     config->rev_checking_enabled = false;
+#else
+  config->rev_checking_enabled = rev_checking_enabled_.GetValue();
+#endif
   config->rev_checking_required_local_anchors =
       rev_checking_required_local_anchors_.GetValue();
   config->sha1_local_anchors_enabled = sha1_local_anchors_enabled_.GetValue();
diff --git a/content/app/content_main_runner.cc b/content/app/content_main_runner.cc
index d5e46419c0b43326a2cb9008729f20e563a8e43a..1759a1fdbac11c174451e9558de309cb97d1273d 100644
--- a/content/app/content_main_runner.cc
+++ b/content/app/content_main_runner.cc
@@ -633,7 +633,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
 
     InitializeV8IfNeeded(command_line, process_type);
 
-#if !defined(OFFICIAL_BUILD)
+#if 0
 #if defined(OS_WIN)
     bool should_enable_stack_dump = !process_type.empty();
 #else
@@ -649,7 +649,7 @@ class ContentMainRunnerImpl : public ContentMainRunner {
             service_manager::switches::kDisableInProcessStackTraces)) {
       base::debug::EnableInProcessStackDumping();
     }
-#endif  // !defined(OFFICIAL_BUILD)
+#endif  // 0
 
     if (delegate_)
       delegate_->PreSandboxStartup();
diff --git a/content/browser/browser_plugin/browser_plugin_guest.cc b/content/browser/browser_plugin/browser_plugin_guest.cc
index ccdafd2e928066294bb5f62327ee1fbb975112f9..2b679ff890b8985446fa318780bebd4fdf22a926 100644
--- a/content/browser/browser_plugin/browser_plugin_guest.cc
+++ b/content/browser/browser_plugin/browser_plugin_guest.cc
@@ -876,6 +876,8 @@ void BrowserPluginGuest::OnDetach(int browser_plugin_instance_id) {
     rwhv->UnregisterFrameSinkId();
 
   delegate_->DidDetach();
+  // MUON(bbondy): Make sure GetGuestProxyRoutingID gets new info on re-attach
+  guest_proxy_routing_id_ = MSG_ROUTING_NONE;
 }
 
 void BrowserPluginGuest::OnDragStatusUpdate(int browser_plugin_instance_id,
diff --git a/content/browser/frame_host/render_frame_message_filter.cc b/content/browser/frame_host/render_frame_message_filter.cc
index 4099c6a7ea9f623552afa1809eac01b0d6aca108..368e0682bf81027a6ea7d2c767c755dd47d30bc5 100644
--- a/content/browser/frame_host/render_frame_message_filter.cc
+++ b/content/browser/frame_host/render_frame_message_filter.cc
@@ -574,7 +574,7 @@ void RenderFrameMessageFilter::GetPluginsCallback(
   PluginServiceFilter* filter = PluginServiceImpl::GetInstance()->GetFilter();
   std::vector<WebPluginInfo> plugins;
 
-  int child_process_id = -1;
+  int child_process_id = render_process_id_;
   int routing_id = MSG_ROUTING_NONE;
   // In this loop, copy the WebPluginInfo (and do not use a reference) because
   // the filter might mutate it.
diff --git a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
index 83a8792dbe1ee56e7541828861253b2d5d39cc22..52515549ce39704a701847d14143c493ff3c9050 100644
--- a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
+++ b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
@@ -22,7 +22,7 @@ @interface SyntheticPinchEvent : NSObject
 // Filled with default values.
 @property(readonly) CGFloat deltaX;
 @property(readonly) CGFloat deltaY;
-@property(readonly) NSEventModifierFlags modifierFlags;
+@property(readonly) NSUInteger modifierFlags;
 @property(readonly) NSTimeInterval timestamp;
 
 @end
diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
index 2662e67f7eeff9883f49c62c3e6223f0649b13a1..2644dce490ae294771b9090f17aad97be1942acf 100644
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -1675,8 +1675,23 @@ viz::FrameSinkId RenderWidgetHostViewAura::FrameSinkIdAtPoint(
       gfx::ConvertPointToPixel(device_scale_factor_, point);
   viz::SurfaceId id = delegated_frame_host_->SurfaceIdAtPoint(
       delegate, point_in_pixels, transformed_point);
-  *transformed_point =
-      gfx::ConvertPointToDIP(device_scale_factor_, *transformed_point);
+
+  // MUON(bbondy): When the point hasn't changed, avoid the double floor
+  // convert from pixels to DIP, which can change the input point from a
+  // couple of pixels. This can cause problems for other parts in the code
+  // like SelectionController which does an exact point comparison.  The
+  // double conversion causes a problem in particular when the DPI is not a
+  // multiple of 100.
+  // For example at 175% DPI 21 * 1.75 = 36.75, floored gives 36.
+  // Then the second DIP convert: 36 / 1.75 = 20.57, floored gives 20.
+  // Same point but we lost a pixel in that case.
+  // See: https://github.com/brave/browser-laptop/issues/8472
+  if (point_in_pixels == *transformed_point) {
+    *transformed_point = point;
+  } else {
+    *transformed_point =
+        gfx::ConvertPointToDIP(device_scale_factor_, *transformed_point);
+  }
 
   // It is possible that the renderer has not yet produced a surface, in which
   // case we return our current FrameSinkId.
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 7671defd7a2f2d49c38015dfe52cdb18b9eb1d21..e40f51499af760411b29f65eed5ed0084be660cf 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -140,6 +140,12 @@ BOOL EventIsReservedBySystem(NSEvent* event) {
 
 }  // namespace
 
+#ifndef MUON_CHROMIUM_BUILD
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+#endif
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -1667,6 +1673,10 @@ new BrowserCompositorMac(this, this, render_widget_host_->is_hidden(),
   if (render_widget_host_) {
     render_widget_host_->SetActive(active);
     if (active) {
+      // RenderWidgetHostViewGuest doesn't send Show/Hide to the platform_view so
+      // make sure the browser compositor is activated for guest views
+      // when the host is initially hidden
+      browser_compositor_->SetRenderWidgetHostIsHidden(false);
       if (HasFocus())
         render_widget_host_->Focus();
     } else {
@@ -1935,7 +1945,14 @@ - (BOOL)acceptsMouseEventsWhenInactive {
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+#ifdef MUON_CHROMIUM_BUILD
   return [self acceptsMouseEventsWhenInactive];
+#else
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
+  return NO;
+#endif  // MUON_CHROMIUM_BUILD
 }
 
 - (void)setCloseOnDeactivate:(BOOL)b {
@@ -2168,8 +2185,10 @@ - (void)keyEvent:(NSEvent*)theEvent wasKeyEquivalent:(BOOL)equiv {
   if (EventIsReservedBySystem(theEvent))
     return;
 
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK([theEvent type] != NSKeyDown ||
          !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
+#endif  // MUON_CHROMIUM_BUILD
 
   if ([theEvent type] == NSFlagsChanged) {
     // Ignore NSFlagsChanged events from the NumLock and Fn keys as
@@ -3034,6 +3053,11 @@ - (RenderWidgetHostViewMac*)renderWidgetHostViewMac {
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 - (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+#ifndef MUON_CHROMIUM_BUILD
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
+#endif  // MUON_CHROMIUM_BUILD
   return (renderWidgetHostView_->GetTextInputType() !=
               ui::TEXT_INPUT_TYPE_NONE &&
           [event type] == NSKeyDown &&
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index c1ae2a911735bd1fea7c4b9517f8dfaa362edaab..15b3a67d58136f5e07afa3cc2778a6d60b96e11f 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1748,7 +1748,8 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   // This is set before initializing the render manager since
   // RenderFrameHostManager::Init calls back into us via its delegate to ask if
   // it should be hidden.
-  should_normally_be_visible_ = !params.initially_hidden;
+  // should_normally_be_visible_ = !params.initially_hidden;
+  should_normally_be_visible_ = true;
 
   // The routing ids must either all be set or all be unset.
   DCHECK((params.routing_id == MSG_ROUTING_NONE &&
@@ -2294,7 +2295,8 @@ void WebContentsImpl::CreateNewWindow(
   DCHECK(!params.opener_suppressed || render_view_route_id == MSG_ROUTING_NONE);
 
   scoped_refptr<SiteInstance> site_instance =
-      params.opener_suppressed && !is_guest
+      // params.opener_suppressed && !is_guest
+      params.opener_suppressed
           ? SiteInstance::CreateForURL(GetBrowserContext(), params.target_url)
           : source_site_instance;
 
diff --git a/content/browser/web_contents/web_contents_view_mac.mm b/content/browser/web_contents/web_contents_view_mac.mm
index 2c5dd9e99e6da2886063b4d4ca86605ca5ff13d3..9bf9e8a762cf3ec28b6d05e6a151a86698d2b7fe 100644
--- a/content/browser/web_contents/web_contents_view_mac.mm
+++ b/content/browser/web_contents/web_contents_view_mac.mm
@@ -614,6 +614,7 @@ - (void)draggedImage:(NSImage*)anImage
              endedAt:(NSPoint)screenPoint
            operation:(NSDragOperation)operation {
   [dragSource_ endDragAt:screenPoint operation:operation];
+  [dragDest_ endDrag];
 
   // Might as well throw out this object now.
   dragSource_.reset();
diff --git a/content/browser/web_contents/web_drag_dest_mac.h b/content/browser/web_contents/web_drag_dest_mac.h
index c81c2a89ab8ea8c0018a6eecfdcf21219f1b0d8d..fa09b9cd19ddacf5b73d07560405fd06837b6920 100644
--- a/content/browser/web_contents/web_drag_dest_mac.h
+++ b/content/browser/web_contents/web_drag_dest_mac.h
@@ -95,6 +95,9 @@ GetRenderWidgetHostAtPoint:(const NSPoint&)viewPoint
 // Sets |dragStartProcessID_| and |dragStartViewID_|.
 - (void)setDragStartTrackersForProcess:(int)processID;
 
+// Ends a drag operation
+- (void)endDrag;
+
 // Returns whether |targetRWH| is a valid RenderWidgetHost to be dragging
 // over. This enforces that same-page, cross-site drags are not allowed. See
 // crbug.com/666858.
diff --git a/content/browser/web_contents/web_drag_dest_mac.mm b/content/browser/web_contents/web_drag_dest_mac.mm
index 35c4ee35242ac1e21beb94ae6b844dff14e04580..fdfc3b0ac56774fc5fd6a591ccad052c8cbec0cb 100644
--- a/content/browser/web_contents/web_drag_dest_mac.mm
+++ b/content/browser/web_contents/web_drag_dest_mac.mm
@@ -347,6 +347,12 @@ - (void)setDragStartTrackersForProcess:(int)processID {
   dragStartViewID_ = GetRenderViewHostID(webContents_->GetRenderViewHost());
 }
 
+- (void)endDrag {
+  dragStartProcessID_ = content::ChildProcessHost::kInvalidUniqueID;
+  dragStartViewID_ = content::GlobalRoutingID(
+    content::ChildProcessHost::kInvalidUniqueID, MSG_ROUTING_NONE);
+}
+
 - (bool)isValidDragTarget:(content::RenderWidgetHostImpl*)targetRWH {
   return targetRWH->GetProcess()->GetID() == dragStartProcessID_ ||
          GetRenderViewHostID(webContents_->GetRenderViewHost()) !=
diff --git a/content/common/content_switches_internal.cc b/content/common/content_switches_internal.cc
index 1033dd09347c61622d57299ce674e6a7a70831c2..3e6f99a48e2697673491b3cce8343d62cd6a07ca 100644
--- a/content/common/content_switches_internal.cc
+++ b/content/common/content_switches_internal.cc
@@ -165,7 +165,7 @@ void WaitForDebugger(const std::string& label) {
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else   // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "Brave";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff --git a/content/common/dom_storage/dom_storage_map.cc b/content/common/dom_storage/dom_storage_map.cc
index 0a6b0176a982782fd1472f607f811dd6c183c3fe..052ca73677cad3b10b494bf2ab823a046dd0b080 100644
--- a/content/common/dom_storage/dom_storage_map.cc
+++ b/content/common/dom_storage/dom_storage_map.cc
@@ -184,8 +184,8 @@ bool DOMStorageMap::SetItemInternal(MapType* map_type,
 
   // Only check quota if the size is increasing, this allows
   // shrinking changes to pre-existing files that are over budget.
-  if (new_item_size > old_item_size && new_storage_used > quota_)
-    return false;
+  // if (new_item_size > old_item_size && new_storage_used > quota_)
+  //   return false;
 
   (*map_type)[key] = value;
   ResetKeyIterator();
diff --git a/content/public/app/mojo/content_renderer_manifest.json b/content/public/app/mojo/content_renderer_manifest.json
index d06258b6d8e9e55b7e7f6d5be58c72bfe906ae65..4b5a7508245b50895b6fd422388406d6eeb69ad4 100644
--- a/content/public/app/mojo/content_renderer_manifest.json
+++ b/content/public/app/mojo/content_renderer_manifest.json
@@ -43,6 +43,7 @@
     "navigation:frame": {
       "provides": {
         "browser": [
+          "autofill::mojom::AutofillAgent",
           "blink::mojom::AppBannerController",
           "blink::mojom::EngagementClient",
           "blink::mojom::InstallationService",
diff --git a/content/public/browser/resource_request_details.cc b/content/public/browser/resource_request_details.cc
index 759915cf42dc22800b30c97dcd8f1f3c8d7e5dfe..f03aca42206522b3f9f4c45f8960fbf21bdbbb5c 100644
--- a/content/public/browser/resource_request_details.cc
+++ b/content/public/browser/resource_request_details.cc
@@ -22,6 +22,10 @@ ResourceRequestDetails::ResourceRequestDetails(const net::URLRequest* request,
       has_certificate(has_certificate),
       ssl_cert_status(request->ssl_info().cert_status),
       socket_address(request->GetSocketAddress()) {
+  if (request->response_info().headers.get())
+    headers = new net::HttpResponseHeaders(
+        request->response_info().headers->raw_headers());
+
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   resource_type = info->GetResourceType();
   http_response_code =
diff --git a/content/public/browser/resource_request_details.h b/content/public/browser/resource_request_details.h
index 06b140186dd90cfc3b780514da5200ca13449147..af9bce9428723a16f9a0be336511b1869ebcadbb 100644
--- a/content/public/browser/resource_request_details.h
+++ b/content/public/browser/resource_request_details.h
@@ -10,6 +10,7 @@
 #include "content/public/common/resource_type.h"
 #include "net/base/host_port_pair.h"
 #include "net/cert/cert_status_flags.h"
+#include "net/http/http_response_headers.h"
 #include "net/url_request/url_request_status.h"
 #include "url/gurl.h"
 
@@ -41,6 +42,7 @@ struct ResourceRequestDetails {
   // HTTP response code. See HttpResponseHeaders::response_code().
   // -1 if there are no response headers yet.
   int http_response_code;
+  scoped_refptr<net::HttpResponseHeaders> headers;
 };
 
 }  // namespace content
diff --git a/content/public/common/web_preferences.cc b/content/public/common/web_preferences.cc
index cc20936125f42016228bfbe2eaa8103a1a2b4d3e..eaf4d799d32abb075a79f87b4ccacd393a5e7309 100644
--- a/content/public/common/web_preferences.cc
+++ b/content/public/common/web_preferences.cc
@@ -232,7 +232,7 @@ WebPreferences::WebPreferences()
       presentation_receiver(false),
       media_controls_enabled(true),
       do_not_update_selection_on_mutating_selection_range(false),
-#if defined(OS_ANDROID)
+#if defined(OS_ANDROID) || !defined(MUON_CHROMIUM_BUILD)
       autoplay_policy(AutoplayPolicy::kUserGestureRequired) {
 #else
       autoplay_policy(AutoplayPolicy::kNoUserGestureRequired) {
diff --git a/content/renderer/browser_plugin/browser_plugin.cc b/content/renderer/browser_plugin/browser_plugin.cc
index 95f5aa5c86a3a4e9f702f2346ccd68cd95cb97c4..f2661ee12a163bae7ef827f6406aaf8c53733e08 100644
--- a/content/renderer/browser_plugin/browser_plugin.cc
+++ b/content/renderer/browser_plugin/browser_plugin.cc
@@ -581,8 +581,6 @@ blink::WebInputEventResult BrowserPlugin::HandleInputEvent(
 
   if (blink::WebInputEvent::IsGestureEventType(event.GetType())) {
     auto gesture_event = static_cast<const blink::WebGestureEvent&>(event);
-    DCHECK(blink::WebInputEvent::kGestureTapDown == event.GetType() ||
-           gesture_event.resending_plugin_id == browser_plugin_instance_id_);
 
     // We shouldn't be forwarding GestureEvents to the Guest anymore. Indicate
     // we handled this only if it's a non-resent event.
diff --git a/device/geolocation/BUILD.gn b/device/geolocation/BUILD.gn
index 3da82acfd77111a332b57e225a47e00460da5551..3b72c8d49928d8eb901f9baf3adcc38b1a10fb8c 100644
--- a/device/geolocation/BUILD.gn
+++ b/device/geolocation/BUILD.gn
@@ -11,6 +11,7 @@ if (is_android) {
 
 component("geolocation") {
   defines = [ "DEVICE_GEOLOCATION_IMPLEMENTATION" ]
+  configs += [ "//electron/build/geolocation" ]
 
   sources = [
     "empty_wifi_data_provider.cc",
diff --git a/device/geolocation/network_location_request.cc b/device/geolocation/network_location_request.cc
index 59c014578f2a43bfa9eba5437c540b351481ae14..729a51817cd24660dd63f960804572bfbbed34ea 100644
--- a/device/geolocation/network_location_request.cc
+++ b/device/geolocation/network_location_request.cc
@@ -31,8 +31,12 @@
 namespace device {
 namespace {
 
+#if defined(GOOGLEAPIS_ENDPOINT)
+const char kNetworkLocationBaseUrl[] = GOOGLEAPIS_ENDPOINT;
+#else
 const char kNetworkLocationBaseUrl[] =
     "https://www.googleapis.com/geolocation/v1/geolocate";
+#endif
 
 const char kLocationString[] = "location";
 const char kLatitudeString[] = "lat";
diff --git a/extensions/browser/api/messaging/message_service.cc b/extensions/browser/api/messaging/message_service.cc
index 4b9084bd6e2f5a2129fcb49be34f2b4479de6f48..28c2d90eb9596ed982f4ac1a4fb28a84680135c3 100644
--- a/extensions/browser/api/messaging/message_service.cc
+++ b/extensions/browser/api/messaging/message_service.cc
@@ -124,6 +124,11 @@ namespace {
 static content::RenderProcessHost* GetExtensionProcess(
     BrowserContext* context,
     const std::string& extension_id) {
+  auto original = ExtensionsBrowserClient::Get()->GetOriginalContext(context);
+  // Always use the original context for non-private child contexts
+  if (!context->IsOffTheRecord()) {
+    context = original;
+  }
   scoped_refptr<SiteInstance> site_instance =
       ProcessManager::Get(context)->GetSiteInstanceForURL(
           Extension::GetBaseURLFromExtensionId(extension_id));
diff --git a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
index 1661c0c65821de8e8e8ac5dbabaa582590c8f0cb..93340b7ce3db2718f64c983a2f68827167f07ede 100644
--- a/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
+++ b/extensions/browser/guest_view/extensions_guest_view_manager_delegate.cc
@@ -56,8 +56,10 @@ void ExtensionsGuestViewManagerDelegate::DispatchEvent(
   // extensions::events::HistogramValue as an argument.
   events::HistogramValue histogram_value =
       guest_view_events::GetEventHistogramValue(event_name);
+#ifdef MUON_CHROMIUM_BUILD
   DCHECK_NE(events::UNKNOWN, histogram_value) << "Event " << event_name
                                               << " must have a histogram value";
+#endif
 
   content::WebContents* owner = guest->owner_web_contents();
   if (!owner)
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index f5e04fd95f84792e0936ba115926c655cb2bd9af..53d21c6bb69534ed3ae27be3b4e36dd4d1993e5d 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -309,7 +309,7 @@ std::string WebViewGuest::GetPartitionID(
 }
 
 // static
-const char WebViewGuest::Type[] = "webview";
+const char WebViewGuest::Type[] = "chrome-webview";
 
 // static
 int WebViewGuest::GetOrGenerateRulesRegistryID(
diff --git a/extensions/common/BUILD.gn b/extensions/common/BUILD.gn
index 521f0f81083f5483026fbf75da22a124661182bf..12e20638bbde2a8024becdeb46d7825486186d37 100644
--- a/extensions/common/BUILD.gn
+++ b/extensions/common/BUILD.gn
@@ -300,6 +300,7 @@ if (enable_extensions) {
       "//chrome:resources",
       "//components/crx_file",
       "//components/url_matcher",
+      "//content/public/common",
       "//crypto",
       "//device/bluetooth",
       "//device/usb",
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 24ba9fd2be824110b84ac82700989c2e86b48ffb..0f11dbc0e84c2d63f839fc086feab3e11ab4372b 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -189,7 +189,10 @@
     {
       "internal": true,
       "channel": "stable",
-      "contexts": ["blessed_extension"]
+      "contexts": ["blessed_extension", "webui"],
+      "matches": [
+        "chrome://brave/*"
+      ]
     }, {
       "internal": true,
       "channel": "stable",
@@ -555,6 +558,7 @@
     "internal": true,
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://mobilesetup/*",
@@ -575,6 +579,13 @@
       "chrome://mobilesetup/*",
       "chrome://oobe/*"
     ]
+  }, {
+    "internal": true,
+    "channel": "stable",
+    "contexts": ["webui"],
+    "matches": [
+      "chrome://brave/*"
+    ]
   }],
   "webViewRequest": [{
     "dependencies": ["permission:webview"],
@@ -583,6 +594,7 @@
     "channel": "stable",
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://mobilesetup/*",
diff --git a/extensions/renderer/module_system.cc b/extensions/renderer/module_system.cc
index c71192a041a22737af6e14fc77f6a7b1db35fbb2..b2b78cc719fb62702adff29288d20e6d45134604 100644
--- a/extensions/renderer/module_system.cc
+++ b/extensions/renderer/module_system.cc
@@ -429,11 +429,13 @@ void ModuleSystem::LazyFieldGetterInner(
   // time, it means something went wrong. Bail out early rather than going
   // through the initialization process again (since bindings may not expect to
   // run multiple times).
+#ifdef MUON_CHROMIUM_BUILD
+  // broken commit in upstream see https://codereview.chromium.org/2835643004#msg23
   if (!module_system->loaded_modules_.insert(name).second) {
     Warn(isolate, "Previous API instantiation failed.");
     return;
   }
-
+#endif
   // Switch to our v8 context because we need functions created while running
   // the require()d module to belong to our context, not the current one.
   v8::Context::Scope context_scope(context);
diff --git a/extensions/renderer/resources/guest_view/guest_view_container.js b/extensions/renderer/resources/guest_view/guest_view_container.js
index 2ef77f4f6359618be7b37d0804a77dd4883dbc06..47f9059b1819810fc4284a9d63aae1d8c658431f 100644
--- a/extensions/renderer/resources/guest_view/guest_view_container.js
+++ b/extensions/renderer/resources/guest_view/guest_view_container.js
@@ -26,6 +26,7 @@ function GuestViewContainer(element, viewType) {
   privates(this).internalElement = this.createInternalElement$();
   this.setupFocusPropagation();
   var shadowRoot = this.element.createShadowRoot();
+  shadowRoot.innerHTML = '<style>:host { display: flex; }</style>'
   shadowRoot.appendChild(privates(this).internalElement);
 
   GuestViewInternalNatives.RegisterView(this.viewInstanceId, this, viewType);
@@ -209,8 +210,9 @@ function registerInternalElement(viewType) {
   proto.createdCallback = function() {
     this.setAttribute('type', 'application/browser-plugin');
     this.setAttribute('id', 'browser-plugin-' + IdGenerator.GetNextId());
-    this.style.width = '100%';
-    this.style.height = '100%';
+    // this.style.width = '100%';
+    // this.style.height = '100%';
+    this.style.flex = '1 1 auto';
   };
 
   proto.attachedCallback = function() {
diff --git a/google_apis/google_api_keys.cc b/google_apis/google_api_keys.cc
index 2e8437ed136e682540835ef4738e3519f9cb6051..e9fae5e344bbdeaa6a8348db3ec088f06b3967f6 100644
--- a/google_apis/google_api_keys.cc
+++ b/google_apis/google_api_keys.cc
@@ -31,7 +31,7 @@
 #define DUMMY_API_TOKEN "dummytoken"
 
 #if !defined(GOOGLE_API_KEY)
-#define GOOGLE_API_KEY DUMMY_API_TOKEN
+#define GOOGLE_API_KEY "AIzaSyAH90V94EcZBP5oH7oc-mXQrSKgASVxER8"
 #endif
 
 #if !defined(GOOGLE_CLIENT_ID_MAIN)
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index c921e6f316ee9a00c6b48270f84167c22deb8ce6..36d51e77b2ca10d45fe44636b9820f747a2edf60 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -352,7 +352,7 @@ std::string GetEffectiveAutoplayPolicy(const base::CommandLine& command_line) {
     return switches::autoplay::kDocumentUserActivationRequiredPolicy;
 
 // The default value is platform dependent.
-#if defined(OS_ANDROID)
+#if defined(OS_ANDROID) || !defined(MUON_CHROMIUM_BUILD)
   return switches::autoplay::kUserGestureRequiredPolicy;
 #else
   return switches::autoplay::kNoUserGestureRequiredPolicy;
diff --git a/net/base/linked_hash_map.h b/net/base/linked_hash_map.h
index 921764f79c603fd8b8037ac52ca2ebabb0440ebd..a7f71c080f52e35310d90b6815b1c1a190ed1063 100644
--- a/net/base/linked_hash_map.h
+++ b/net/base/linked_hash_map.h
@@ -142,8 +142,7 @@ class linked_hash_map {
   // map and list, a CHECK() error will occur.
   iterator erase(iterator position) {
     typename MapType::iterator found = map_.find(position->first);
-    CHECK(found->second == position)
-        << "Inconsisent iterator for map and list, or the iterator is invalid.";
+    CHECK(found->second == position);
 
     map_.erase(found);
     return list_.erase(position);
@@ -222,8 +221,7 @@ class linked_hash_map {
     typename ListType::iterator last = list_.end();
     --last;
 
-    CHECK(map_.insert(std::make_pair(pair.first, last)).second)
-        << "Map and list are inconsistent";
+    CHECK(map_.insert(std::make_pair(pair.first, last)).second);
 
     return std::make_pair(last, true);
   }
diff --git a/net/http/BUILD.gn b/net/http/BUILD.gn
index d00da41da1d8bbc40d8a85d582c1966ed22eaaf1..6a3b54e91eafb8f187989c9c954be0008343aa63 100644
--- a/net/http/BUILD.gn
+++ b/net/http/BUILD.gn
@@ -10,7 +10,7 @@ compiled_action("generate_transport_security_state") {
 
   # Inputs in order expected by the command line of the tool.
   inputs = [
-    "transport_security_state_static.json",
+    "//electron/atom/browser/resources/transport_security_state_static.json",
     "transport_security_state_static.pins",
     "transport_security_state_static.template",
   ]
diff --git a/net/http/http_util.cc b/net/http/http_util.cc
index 9361272ce0d539dd4bfa1b66b07cb416fe867b14..2df550bc5c628f9029f44328922dac267bbc17b1 100644
--- a/net/http/http_util.cc
+++ b/net/http/http_util.cc
@@ -57,8 +57,8 @@ size_t FindStringEnd(const std::string& line, size_t start, char delim) {
 // static
 std::string HttpUtil::SpecForRequest(const GURL& url) {
   // We may get ftp scheme when fetching ftp resources through proxy.
-  DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
-                            url.SchemeIsWSOrWSS()));
+  // DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
+  //                           url.SchemeIsWSOrWSS()));
   return SimplifyUrlForRequest(url).spec();
 }
 
diff --git a/net/http/transport_security_state.cc b/net/http/transport_security_state.cc
index a433afd0217830b49ddb3381ad55afeae2381840..ddcca749666f956c6317676dbcdd48daa861374d 100644
--- a/net/http/transport_security_state.cc
+++ b/net/http/transport_security_state.cc
@@ -762,6 +762,10 @@ TransportSecurityState::TransportSecurityState()
   enable_static_pins_ = false;
   enable_static_expect_ct_ = false;
 #endif
+
+#if !defined(MUON_CHROMIUM_BUILD)
+  enable_static_pins_ = true;
+#endif
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 }
 
diff --git a/net/url_request/url_request_job.h b/net/url_request/url_request_job.h
index 389315a25d7da30d71b59e3803ab795bc4c18e1c..79797fe7e674f9f6d2a65de542f262a945454f16 100644
--- a/net/url_request/url_request_job.h
+++ b/net/url_request/url_request_job.h
@@ -285,6 +285,7 @@ class NET_EXPORT URLRequestJob : public base::PowerObserver {
   void OnCallToDelegate();
   void OnCallToDelegateComplete();
 
+public:
   // Called to read raw (pre-filtered) data from this Job. Reads at most
   // |buf_size| bytes into |buf|.
   // Possible return values:
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.h b/third_party/WebKit/Source/core/editing/EditingBehavior.h
index 023555bcd3b56fd12c3319096deff07fa9854388..5b75bfaa858cead732a701029f45f5492a19549e 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.h
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.h
@@ -42,7 +42,7 @@ class CORE_EXPORT EditingBehavior {
   // area, maintain the horizontal position on Windows and Android but extend it
   // to the boundary of the editable content on Mac and Linux.
   bool ShouldMoveCaretToHorizontalBoundaryWhenPastTopOrBottom() const {
-    return type_ != kEditingWindowsBehavior && type_ != kEditingAndroidBehavior;
+    return false;
   }
 
   bool ShouldSelectReplacement() const {
diff --git a/third_party/WebKit/Source/core/exported/WebViewImpl.cpp b/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
index b73e62a0420f77db2874260a6f5e141264018cb8..c0f24ad844cb53eb813e4dc6ad7f8eef20ca7fc4 100644
--- a/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
+++ b/third_party/WebKit/Source/core/exported/WebViewImpl.cpp
@@ -3237,6 +3237,7 @@ void WebViewImpl::DidCloseContextMenu() {
   LocalFrame* frame = page_->GetFocusController().FocusedFrame();
   if (frame)
     frame->Selection().SetCaretBlinkingSuspended(false);
+  page_->GetContextMenuController().ClearContextMenu();
 }
 
 void WebViewImpl::HidePopups() {
diff --git a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
index fbf699ed4464957ab7b24091aaa14f3411270ac0..b70a7f46cefdf93f53acfbf781fb363cbf90f20b 100644
--- a/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
+++ b/third_party/WebKit/Source/core/html/media/AutoplayPolicy.cpp
@@ -303,6 +303,12 @@ bool AutoplayPolicy::IsGestureNeededForPlaybackIfPendingUserGestureIsLocked()
   if (element_->GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
     return false;
 
+  // MUON(darkdh): default allow local files
+  if (element_->GetDocument().origin() == String("null"))
+    return false;
+
+  // MUON(darkdh): prompt autoply permission even for muted video
+#if defined(MUON_CHROMIUM_BUILD)
   // We want to allow muted video to autoplay if:
   // - the flag is enabled;
   // - Data Saver is not enabled;
@@ -319,6 +325,12 @@ bool AutoplayPolicy::IsGestureNeededForPlaybackIfPendingUserGestureIsLocked()
       IsAutoplayAllowedPerSettings()) {
     return false;
   }
+#endif
+
+  // MUON(darkdh): prompt for autoplay permission
+  if ((element_->IsHTMLVideoElement() || element_->IsAudioElement()) &&
+      IsAutoplayAllowedPerSettings())
+    return false;
 
   return true;
 }
diff --git a/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp b/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
index 31d64cf39c3f9eaa043ddf2ce12d400b59d2f4f0..5f021239c77ff6af2a68d994b49bd4cd79def88d 100644
--- a/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
+++ b/third_party/WebKit/Source/platform/bindings/V8PerIsolateData.cpp
@@ -51,7 +51,8 @@ v8::Isolate* MainThreadIsolate() {
 static V8PerIsolateData* g_main_thread_per_isolate_data = nullptr;
 
 static void BeforeCallEnteredCallback(v8::Isolate* isolate) {
-  CHECK(!ScriptForbiddenScope::IsScriptForbidden());
+  // TODO(jochen): Re-enable this once https://crbug.com/728583
+  // CHECK(!ScriptForbiddenScope::IsScriptForbidden());
 }
 
 static void MicrotasksCompletedCallback(v8::Isolate* isolate) {
diff --git a/third_party/boringssl/BUILD.generated.gni b/third_party/boringssl/BUILD.generated.gni
index f59afac5c3038d793f097bb7f8902734e11a600c..12fba44e3eca61675e861c118576a77ea68d9490 100644
--- a/third_party/boringssl/BUILD.generated.gni
+++ b/third_party/boringssl/BUILD.generated.gni
@@ -373,6 +373,24 @@ ssl_sources = [
   "src/ssl/tls_record.cc",
 ]
 
+decrepit_sources = [
+  "src/decrepit/bio/base64_bio.c",
+  "src/decrepit/blowfish/blowfish.c",
+  "src/decrepit/cast/cast.c",
+  "src/decrepit/cast/cast_tables.c",
+  "src/decrepit/des/cfb64ede.c",
+  "src/decrepit/dh/dh_decrepit.c",
+  "src/decrepit/dsa/dsa_decrepit.c",
+  "src/decrepit/evp/dss1.c",
+  "src/decrepit/evp/evp_do_all.c",
+  "src/decrepit/rc4/rc4_decrepit.c",
+  "src/decrepit/ripemd/ripemd.c",
+  "src/decrepit/rsa/rsa_decrepit.c",
+  "src/decrepit/ssl/ssl_decrepit.c",
+  "src/decrepit/x509/x509_decrepit.c",
+  "src/decrepit/xts/xts.c",
+]
+
 crypto_sources_ios_aarch64 = [
   "ios-aarch64/crypto/chacha/chacha-armv8.S",
   "ios-aarch64/crypto/fipsmodule/aesv8-armx64.S",
diff --git a/third_party/boringssl/BUILD.gn b/third_party/boringssl/BUILD.gn
index cb86c2b9de7290fc1ad6b365ad8a0afe505c81a5..68289ca7a7469bb0ed55f0798f1d3f4fa0f6e1ee 100644
--- a/third_party/boringssl/BUILD.gn
+++ b/third_party/boringssl/BUILD.gn
@@ -44,7 +44,7 @@ config("no_asm_config") {
   defines = [ "OPENSSL_NO_ASM" ]
 }
 
-all_sources = crypto_sources + ssl_sources
+all_sources = crypto_sources + ssl_sources + decrepit_sources
 
 # Windows' assembly is built with Yasm. The other platforms use the platform
 # assembler.
diff --git a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
index 7505524b693b24d9028447929d881232a0483561..03eea7522154c40691405ec43e07303b3e80e277 100644
--- a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
+++ b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
@@ -207,7 +207,11 @@ void CrashReportUploadThread::ProcessPendingReport(
         // If the most recent upload attempt occurred within the past hour,
         // don’t attempt to upload the new report. If it happened longer ago,
         // attempt to upload the report.
+#if defined(MUON_CHROMIUM_BUILD)
         constexpr int kUploadAttemptIntervalSeconds = 60 * 60;  // 1 hour
+#else
+        constexpr int kUploadAttemptIntervalSeconds = 1 * 60;  // 1 min
+#endif
         if (now - last_upload_attempt_time < kUploadAttemptIntervalSeconds) {
           database_->SkipReportUpload(
               report.uuid, Metrics::CrashSkippedReason::kUploadThrottled);
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index f35d8187209663167a19a06a745b95a89d7b9063..36f7959a0508676832b8ecd8d1912fce7456f6e2 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -110,6 +110,10 @@ if (widevine_cdm_binary_files != []) {
       "//build/config:exe_and_shlib_deps",
     ]
 
+    if (is_mac) {
+      ldflags = [ "-Wl,-install_name,@loader_path/libwidevinecdm.dylib" ]
+    }
+
     if (is_posix && !is_mac) {
       cflags = [ "-fvisibility=hidden" ]
     }
diff --git a/third_party/widevine/cdm/stub/manifest.json b/third_party/widevine/cdm/stub/manifest.json
index d466ccd1e02ed8c158fda545fe2175c135018da5..16ae2a357b21de66b1558939f9333b3c22e9cff2 100644
--- a/third_party/widevine/cdm/stub/manifest.json
+++ b/third_party/widevine/cdm/stub/manifest.json
@@ -24,6 +24,11 @@
       "os": "mac",
       "arch": "x64",
       "sub_package_path": "_platform_specific/mac_x64/"
+    },
+    {
+      "os": "linux",
+      "arch": "x64",
+      "sub_package_path": "_platform_specific/linux_x64/"
     }
   ]
 }
diff --git a/ui/views/controls/menu/menu_controller.cc b/ui/views/controls/menu/menu_controller.cc
index 9389f25f034d131f9aab4bd521db7999c12c5a5c..382d93ef0f641bdf80ca6ce84d1438670350fe12 100644
--- a/ui/views/controls/menu/menu_controller.cc
+++ b/ui/views/controls/menu/menu_controller.cc
@@ -614,6 +614,7 @@ bool MenuController::OnMouseDragged(SubmenuView* source,
     return true;
   }
   MenuItemView* mouse_menu = NULL;
+  base::WeakPtr<MenuController> this_ref = AsWeakPtr();
   if (part.type == MenuPart::MENU_ITEM) {
     // If there is no menu target, but a submenu target, then we are interacting
     // with an empty menu item within a submenu. These cannot become selection
@@ -638,7 +639,10 @@ bool MenuController::OnMouseDragged(SubmenuView* source,
       }
     }
   }
-  UpdateActiveMouseView(source, event, mouse_menu);
+  // The above code may have deleted us, so MenuController may have
+  // been destroyed.
+  if (this_ref)
+    UpdateActiveMouseView(source, event, mouse_menu);
 
   return true;
 }
